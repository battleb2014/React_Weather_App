{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","tempHigh","tempLow","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","Math","floor","main","temp","temp_max","temp_min","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAaeA,G,uLATP,OACI,yBAAKC,UAAU,QACX,8CACA,4E,GALIC,IAAMC,YCYXC,E,iLAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACxB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,oD,GANIT,IAAMC,WCgBVS,E,iLAdP,OACI,yBAAKX,UAAU,aACVK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,wCAAcR,KAAKC,MAAMM,KAAzB,KAAiCP,KAAKC,MAAMO,SACrFR,KAAKC,MAAMQ,aAAe,2CAAiBT,KAAKC,MAAMQ,aACtDT,KAAKC,MAAMS,UAAY,2CAAiBV,KAAKC,MAAMS,UACnDV,KAAKC,MAAMU,SAAW,0CAAgBX,KAAKC,MAAMU,SACjDX,KAAKC,MAAMW,UAAY,wCAAcZ,KAAKC,MAAMW,UAChDZ,KAAKC,MAAMY,aAAe,0CAAgBb,KAAKC,MAAMY,aACrDb,KAAKC,MAAMa,OAAS,uBAAGnB,UAAU,SAAUK,KAAKC,MAAMa,Y,GAVjDlB,IAAMC,WCItBkB,EAAU,mCAiEDC,E,2MA9DbC,MAAQ,CACNR,iBAAaS,EACbR,cAAUQ,EACVP,aAASO,EACTX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAEThB,W,uCAAa,WAAOiB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUW,EAAEG,OAAOC,SAASf,QAAQgB,MAH/B,SAIYC,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DC,EAA7D,kBAA8EO,IAJ/F,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMRrB,GAAQC,GACTqB,QAAQC,IAAIF,GACd,EAAKG,SAAS,CACZtB,YAAauB,KAAKC,MAAuB,EAAjBL,EAAKM,KAAKC,KAAS,EAAI,QAC/CzB,SAAUsB,KAAKC,MAA2B,EAArBL,EAAKM,KAAKE,SAAa,EAAI,QAChDzB,QAASqB,KAAKC,MAA2B,EAArBL,EAAKM,KAAKG,SAAa,EAAI,QAC/C9B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKU,IAAI9B,QAClBI,SAAUgB,EAAKM,KAAKtB,SACpBC,YAAae,EAAKW,QAAQ,GAAG1B,YAC7BC,MAAO,MAGP,EAAKiB,SAAS,CACZtB,iBAAaS,EACbR,cAAUQ,EACVP,aAASO,EACTX,UAAMW,EACNV,aAASU,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,mCA3BA,4C,8HAiCX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMZ,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAO,YAAeT,KAAKiB,MAAMR,YAC1BC,SAAYV,KAAKiB,MAAMP,SACvBC,QAAWX,KAAKiB,MAAMN,QACtBJ,KAAQP,KAAKiB,MAAMV,KACnBC,QAAWR,KAAKiB,MAAMT,QACtBI,SAAYZ,KAAKiB,MAAML,SACvBC,YAAeb,KAAKiB,MAAMJ,YAC1BC,MAASd,KAAKiB,MAAMH,a,GAxDVlB,IAAMC,WCIJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8208e350.chunk.js","sourcesContent":["import React from 'react';\n\nclass Title extends React.Component {\n    render() {\n        return(\n            <div className='wrap'>\n                <h1>Weather Finder</h1>\n                <p>Find temperature, conditions and more...</p>\n            </div>\n        );\n    }\n}\n\nexport default Title;","import React from 'react';\n\nclass Form extends React.Component {\n    render() {\n        return(\n            <form onSubmit={this.props.getWeather}>\n               <input type='text' name='city' placeholder='City'></input>\n               <input type='text' name='country' placeholder='Country'></input>\n               <button>Get Weather</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React from 'react';\n\nclass Weather extends React.Component {\n    render() {\n        return(\n            <div className='container'>\n               { this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p> }\n               { this.props.temperature && <p>Temperature: {this.props.temperature}</p> }\n               { this.props.tempHigh && <p>Todays High: {this.props.tempHigh}</p> }\n               { this.props.tempLow && <p>Todays Low: {this.props.tempLow}</p> }\n               { this.props.humidity && <p>Humidity: {this.props.humidity}</p> }\n               { this.props.description && <p>Conditions: {this.props.description}</p> }\n               { this.props.error && <p className='error'>{ this.props.error }</p>}\n            </div>\n        );\n    }\n}\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '3b7f67810e144bc4832c4de18725ad2d';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    tempHigh: undefined,\n    tempLow: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n    const data = await api_call.json();\n    if(city && country) {\n      console.log(data);\n    this.setState({\n      temperature: Math.floor(data.main.temp * 9/5 - 459.67), //temp returned in kelvin, so equation used to convert to fahrenheit\n      tempHigh: Math.floor(data.main.temp_max * 9/5 - 459.67),\n      tempLow: Math.floor(data.main.temp_min * 9/5 - 459.67),\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: ''\n    });\n    } else {\n      this.setState({\n        temperature: undefined,\n        tempHigh: undefined,\n        tempLow: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter city and country.'\n      });\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <Title />\n        <Form getWeather={this.getWeather}/>\n        <Weather \n        temperature = {this.state.temperature}\n        tempHigh = {this.state.tempHigh}\n        tempLow = {this.state.tempLow}\n        city = {this.state.city}\n        country = {this.state.country}\n        humidity = {this.state.humidity}\n        description = {this.state.description}\n        error = {this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}